From: YOKOTA Hiroshi <yokota.hgml@gmail.com>
Date: Tue, 14 Sep 2021 23:51:04 +0900
Subject: Disable hardware acceleration support on armel

Forwarded: https://sourceforge.net/p/sevenzip/patches/369/

Use "__ARM_ARCH" to split "armel" and "armhf".

ARM v7 feature breaks ARM v5 compiler because the feature is not supported
by ARM v5 compiler.

__ARM_ARCH:
  armel = 5
  armhf = 7
---
 C/Aes.c                   | 2 ++
 C/AesOpt.c                | 2 ++
 C/Sha1.c                  | 2 ++
 C/Sha1Opt.c               | 2 ++
 C/Sha256.c                | 2 ++
 C/Sha256Opt.c             | 2 ++
 CPP/7zip/Crypto/MyAes.cpp | 2 ++
 7 files changed, 14 insertions(+)

diff --git a/C/Aes.c b/C/Aes.c
index d6732a6..f7b632f 100644
--- a/C/Aes.c
+++ b/C/Aes.c
@@ -56,6 +56,7 @@ static Byte InvS[256];
 #ifdef MY_CPU_X86_OR_AMD64
   #define USE_HW_AES
 #elif defined(MY_CPU_ARM_OR_ARM64) && defined(MY_CPU_LE)
+ #if (__ARM_ARCH >= 7)
   #if defined(__clang__)
     #if (__clang_major__ >= 8) // fix that check
       #define USE_HW_AES
@@ -69,6 +70,7 @@ static Byte InvS[256];
       #define USE_HW_AES
     #endif
   #endif
+ #endif
 #endif
 
 #ifdef USE_HW_AES
diff --git a/C/AesOpt.c b/C/AesOpt.c
index af911e2..b989692 100644
--- a/C/AesOpt.c
+++ b/C/AesOpt.c
@@ -556,6 +556,7 @@ VAES_COMPAT_STUB (AesCtr_Code_HW)
 
 #elif defined(MY_CPU_ARM_OR_ARM64) && defined(MY_CPU_LE)
 
+ #if (__ARM_ARCH >= 7)
   #if defined(__clang__)
     #if (__clang_major__ >= 8) // fix that check
       #define USE_HW_AES
@@ -569,6 +570,7 @@ VAES_COMPAT_STUB (AesCtr_Code_HW)
       #define USE_HW_AES
     #endif
   #endif
+ #endif
 
 #ifdef USE_HW_AES
 
diff --git a/C/Sha1.c b/C/Sha1.c
index 6405fe2..9237d17 100644
--- a/C/Sha1.c
+++ b/C/Sha1.c
@@ -33,6 +33,7 @@ This code is based on public domain code of Steve Reid from Wei Dai's Crypto++ l
     #endif
   #endif
 #elif defined(MY_CPU_ARM_OR_ARM64)
+ #if (__ARM_ARCH >= 7)
   #ifdef _MSC_VER
     #if _MSC_VER >= 1910 && _MSC_VER >= 1929 && _MSC_FULL_VER >= 192930037
       #define Z7_COMPILER_SHA1_SUPPORTED
@@ -46,6 +47,7 @@ This code is based on public domain code of Steve Reid from Wei Dai's Crypto++ l
       #define Z7_COMPILER_SHA1_SUPPORTED
     #endif
   #endif
+ #endif
 #endif
 
 void Z7_FASTCALL Sha1_UpdateBlocks(UInt32 state[5], const Byte *data, size_t numBlocks);
diff --git a/C/Sha1Opt.c b/C/Sha1Opt.c
index b47a73a..435a915 100644
--- a/C/Sha1Opt.c
+++ b/C/Sha1Opt.c
@@ -204,6 +204,7 @@ void Z7_FASTCALL Sha1_UpdateBlocks_HW(UInt32 state[5], const Byte *data, size_t
 
 #elif defined(MY_CPU_ARM_OR_ARM64)
 
+ #if (__ARM_ARCH >= 7)
   #if defined(__clang__)
     #if (__clang_major__ >= 8) // fix that check
       #define USE_HW_SHA
@@ -217,6 +218,7 @@ void Z7_FASTCALL Sha1_UpdateBlocks_HW(UInt32 state[5], const Byte *data, size_t
       #define USE_HW_SHA
     #endif
   #endif
+ #endif
 
 #ifdef USE_HW_SHA
 
diff --git a/C/Sha256.c b/C/Sha256.c
index 538ccaa..667f749 100644
--- a/C/Sha256.c
+++ b/C/Sha256.c
@@ -33,6 +33,7 @@ This code is based on public domain code from Wei Dai's Crypto++ library. */
     #endif
   #endif
 #elif defined(MY_CPU_ARM_OR_ARM64)
+ #if (__ARM_ARCH >= 7)
   #ifdef _MSC_VER
     #if _MSC_VER >= 1910
       #define Z7_COMPILER_SHA256_SUPPORTED
@@ -46,6 +47,7 @@ This code is based on public domain code from Wei Dai's Crypto++ library. */
       #define Z7_COMPILER_SHA256_SUPPORTED
     #endif
   #endif
+ #endif
 #endif
 
 void Z7_FASTCALL Sha256_UpdateBlocks(UInt32 state[8], const Byte *data, size_t numBlocks);
diff --git a/C/Sha256Opt.c b/C/Sha256Opt.c
index 4fccb33..0fb2d6f 100644
--- a/C/Sha256Opt.c
+++ b/C/Sha256Opt.c
@@ -204,6 +204,7 @@ void Z7_FASTCALL Sha256_UpdateBlocks_HW(UInt32 state[8], const Byte *data, size_
 
 #elif defined(MY_CPU_ARM_OR_ARM64)
 
+ #if (__ARM_ARCH >= 7)
   #if defined(__clang__)
     #if (__clang_major__ >= 8) // fix that check
       #define USE_HW_SHA
@@ -217,6 +218,7 @@ void Z7_FASTCALL Sha256_UpdateBlocks_HW(UInt32 state[8], const Byte *data, size_
       #define USE_HW_SHA
     #endif
   #endif
+ #endif
 
 #ifdef USE_HW_SHA
 
diff --git a/CPP/7zip/Crypto/MyAes.cpp b/CPP/7zip/Crypto/MyAes.cpp
index 9275d16..e543759 100644
--- a/CPP/7zip/Crypto/MyAes.cpp
+++ b/CPP/7zip/Crypto/MyAes.cpp
@@ -155,6 +155,7 @@ Z7_COM7F_IMF2(UInt32, CAesCtrCoder::Filter(Byte *data, UInt32 size))
 #ifdef MY_CPU_X86_OR_AMD64
   #define USE_HW_AES
 #elif defined(MY_CPU_ARM_OR_ARM64) && defined(MY_CPU_LE)
+ #if (__ARM_ARCH >= 7)
   #if defined(__clang__)
     #if (__clang_major__ >= 8) // fix that check
       #define USE_HW_AES
@@ -168,6 +169,7 @@ Z7_COM7F_IMF2(UInt32, CAesCtrCoder::Filter(Byte *data, UInt32 size))
       #define USE_HW_AES
     #endif
   #endif
+ #endif
 #endif
 
 #ifdef USE_HW_AES
